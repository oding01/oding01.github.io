[
  
  {
    "title": "[Trouble Shooting] 리렌더링 방지를 위한 고찰",
    "url": "/posts/react-rerendering-prevention/",
    "categories": "React, TroubleShooting",
    "tags": "react, hooks, javascript, troubleshooting",
    "date": "2025-01-17 10:00:00 +0900",
    





    
    "snippet": "나만의 책장 만들기라는 작은 실습을 진행했습니다. mock 데이터인 book들을 나열하고, 읽기를 클릭하면 현재 읽고 있는 책에 해당 책이 보여집니다.React에서 리렌더링 이라는 개념은 중요하다고 생각해서, 컴포넌트들의 리렌더링 방지에 대한 고찰을 시작했습니다.구현기능구현 기능은 아래와 같습니다.  현재 읽고있는 책 : 아래 책 리스트 중 읽고싶은 ...",
    "content": "나만의 책장 만들기라는 작은 실습을 진행했습니다. mock 데이터인 book들을 나열하고, 읽기를 클릭하면 현재 읽고 있는 책에 해당 책이 보여집니다.React에서 리렌더링 이라는 개념은 중요하다고 생각해서, 컴포넌트들의 리렌더링 방지에 대한 고찰을 시작했습니다.구현기능구현 기능은 아래와 같습니다.  현재 읽고있는 책 : 아래 책 리스트 중 읽고싶은 책에 읽기 버튼 클릭 시, 해당 책을 검색창 위에 노출  읽고있는 책을 localStorage에 저장하여 페이지 새로고침 시에도 노출  책 검색창 : 책 검색 시 실시간 검색 가능  책 리스트 : 내가 가진 모든 책들을 나열하여 표기  페이지 이동 : Link를 사용하여 페이지 이동  상세 페이지 : 책 리스트에서 책을 클릭하면 해당 책의 상세 페이지로 이동  고객 센터 페이지 : Footer의 고객센터 클릭 시 고객센터 페이지로 이동  NotFound : 유효하지 않은 URL 접근 시 NotFound 페이지 표시구조폴더 구조는 아래와 같이 나눴습니다../src├── App.css├── App.jsx├── components│   ├── BookList.jsx│   ├── BookShelves.jsx│   ├── Container.jsx│   ├── Creator.jsx│   ├── Footer.jsx│   ├── Header.jsx│   └── SearchInput.jsx├── context│   ├── BookContext.jsx│   └── SearhContext.jsx├── hooks│   ├── useCurrentBook.jsx│   └── useSearchBook.jsx├── index.css├── layout│   └── layout.jsx├── main.jsx├── mock│   └── book.js├── pages│   ├── Details.jsx│   ├── Help.jsx│   ├── Home.jsx│   └── NotFound.jsx└── shared    └── Router.jsx📌 문제1. 검색어 입력 시 입력 폼까지 리렌더링 되는 현상저는 검색어 입력 시엔 BookList만 리렌더링 하고 싶었습니다. &lt;input&gt;을 입력 시마다 리렌더링 하는 것은 불필요하다고 생각했기 때문입니다.시도 및 해결이 문제는 간단하게 memo를 사용해서 방지해줄 수 있었습니다.export default memo(SearchInput)또는 이런 방법도 있더군요.import { SearchContext } from '@/context/SearhContext'const SearchInput = () =&gt; {  return (    &lt;&gt;      &lt;SearchContext.Consumer&gt;        {(context) =&gt; (          &lt;input placeholder='검색' onChange={(e) =&gt; context.searching(e.target.value)} /&gt;        )}      &lt;/SearchContext.Consumer&gt;    &lt;/&gt;  )}export default SearchInput2. 읽기 버튼으로 상태 변경 시 부모 컴포넌트 리렌더링제가 의도한 바와 다르게 동작되는 부분은 Context로 감싸준 BookShelves 컴포넌트에서 발생했습니다.const Home = () =&gt; {  return (    &lt;BookProvider&gt;      &lt;SearchProvider&gt;        &lt;Container type='bookshelves'&gt;&lt;/Container&gt;      &lt;/SearchProvider&gt;    &lt;/BookProvider&gt;    &lt;Container type='creator'&gt;&lt;/Container&gt;  )}제 파일 구조를 보면 BookShelves 컴포넌트 안에 BookList와 SearchInput 컴포넌트가 존재합니다.그리고 BookProvider는 currentBook 현재 읽고 있는 책의 상태를, SearchProvider는 searchBook 검색어의 상태를 관리합니다.Home 페이지에서, BookShelves와 Creator 컴포넌트를 Provider로 감싸다 보니, 자식인 BookList에서 읽기 버튼을 클릭 했을 때, currentBook의 상태가 변경되며 상태를 공유받고 있는 부모인 BookShelves 까지 리렌더링 되는 현상이 일어났습니다.제가 원하는 것은 BookShelves 컴포넌트의 리렌더링이 아닌  읽기 버튼 클릭 시 현재 읽고 있는 책 부분만 리렌더링 되는 것혹은  현재 읽고 있는 책 + BookList 리렌더링이었습니다.일단 BookShevles 컴포넌트만 리렌더링 되지 않으면 된단 생각이었습니다. 제가 원하는 건 읽기 버튼을 클릭했을 때 현재 읽고 있는 책 부분의 변경뿐이니까요.시도 1Consumer로 해당 부분만 구독시키면 되지 않을까?SearchInput 컴포넌트를 Consumer로 감싸줬던 것처럼 시도해봤습니다.&lt;BookContext.Consumer&gt;  {(saved) =&gt; &lt;div&gt;현재 읽고 있는 책 : {saved.currentBook?.title || '없음'}&lt;/div&gt;}&lt;/BookContext.Consumer&gt;하지만 여전히 리렌더링이 일어나는 걸 확인할 수 있었습니다.시도 2뭐가 문제일까… Consumer는 그대로 둔 채 BookList의 코드를 한참 들여다 봤습니다.const { filteredBooks } = useContext(SearchContext)const { setCurrentBook } = useContext(BookContext)function savedCurrentBook(book) {  setCurrentBook(book)  localStorage.setItem('currentBook', book.title)}버튼 클릭을 하면 savedCurrentBook이 호출 → setCurrentBook으로 curretBook 상태를 변경 → 상태 변경을 감지한 Context가 구독하고 있는 모든 컴포넌트를 리렌더링이 방식이 부모 컴포넌트까지 리렌더링 하고 있구나! 싶어 변경했습니다.setCurrent를 바로 호출하는 방식이 아니라, 해당 savedCurrentBook을 BookContext로 옮겨주고, 상태 변경하는 함수로 전달하게 했습니다.// BookContext.jsxconst savedCurrentBook = (book) =&gt; {  const savedBookTitle = localStorage.getItem('currentBook')  // 이미 같은 책이 저장되어 있다면 상태 변경 및 리렌더링 방지  if (savedBookTitle === book.title) return  setCurrentBook(book)  localStorage.setItem('currentBook', book.title)}여전히 리렌더링이 일어납니다.시도 3이번엔 리렌더링이 일어나지 말아야할 부분인 BookShelves를 봤습니다.BookShelves 컴포넌트 안에 useEffect로 눈을 돌렸습니다.useEffect(() =&gt; {  const savedBookTitle = localStorage.getItem('currentBook')  if (savedBookTitle) {    const book = books.find((b) =&gt; b.title === savedBookTitle)    if (book) setCurrentBook(book)  }}, [])처음 BookShelves가 그려진 후, 로컬스토리지에서 아이템을 가져와 DOM을 업데이트 합니다.해당 로직을 currentBook의 useState 초기 값으로 이동시켰습니다.이 부분이 문제였던 것 같습니다. //왜인지는 나중에// BookProvider.jsxconst [currentBook, setCurrentBook] = useState(() =&gt; {  const savedBookTitle = localStorage.getItem('currentBook')  return savedBookTitle ? { title: savedBookTitle } : null})읽기 클릭 시에도 BookList만 리렌더링3. 버튼 클릭 시 왜 BookList가 리렌더링 될까?BookList가 리렌더링되는 이유는 useCurrentBook 훅을 통해 BookContext를 구독하고 있기 때문입니다.현재 구조에서,  버튼 클릭 → savedCurrentBook 호출  BookContext의 currentBook 값 변경  이 Context를 구독하는 모든 컴포넌트 리렌더링          BookShelves의 Consumer 부분      useCurrentBook을 사용하는 BookList 컴포넌트      시도현재 BookList가 BookContext와 SearchContext 모두 구독하고 있기 때문에, 리렌더링이 일어날 수 밖에 없습니다.➡️ 따라서 BookContext를 구독하는 부분과 SearchContext를 구독하는 부분을 나누고자 했습니다. BookList는 useSearch 훅의 filteredBooks만 받아오고, BookItem은 useCurrentBook의 savedCurrentBook만 받아오도록요.하지만 그렇게 나누고 나니, BookList와 BookItem n개가 좌르륵 리렌더링 됐습니다. 여전히 BookItem에서 useCurrentBook을 사용하고 있기 때문입니다.그래서 Parent와 Children에 관해 생각하는 도중, 해당 블로그를 보게 됐습니다.해당 글에서는,&lt;Parent&gt;{children}&lt;Parent/&gt; = &lt;Parent children={&lt;Child /&gt;} = &lt;Parent&gt;&lt;Child /&gt;&lt;/Parent&gt;children으로 &lt;Child /&gt;을 전달하면, 이 &lt;Child /&gt;의 React Element는 Parent가 리렌더링 되더라도 새로운 객체로 생성되지 않고, 기존 객체를 재사용한다.  children으로 전달된 컴포넌트가 재렌더링되지 않는 이유는 React가 JSX 내부에서 생성된 React Element를 메모이제이션(Memoization)하기 때문사진을 인용하여 보자면 이렇습니다.결론은 Parent의 상태 변경으로 인한 리렌더링이라도, Child를 props로 받는다면 Child의 속성이나 상태가 변경되지 않는 한 Child의 리렌더링은 일어나지 않습니다.❓❓ 해결인가?다는 아니었습니다. 제 BookList는 BookItem을 return 하고 있었기 때문에, &lt;Parent&gt;&lt;Child/&gt;&lt;/Parent&gt;의 구조가 아니었기 때문입니다.그래서 전체를 렌더링하고 있는 BookShelves 컴포넌트로 갔습니다.// BookShelves.jsxconst BookShelves = () =&gt; {  console.log('[BookShelves] - rerender')  return (    &lt;&gt;      &lt;h3&gt;나만의 책장&lt;/h3&gt;      &lt;BookContext.Consumer&gt;        {(saved) =&gt; &lt;div&gt;현재 읽고 있는 책 : {saved.currentBook?.title || '없음'}&lt;/div&gt;}      &lt;/BookContext.Consumer&gt;      &lt;SearchInput /&gt;      &lt;BookList&gt;        &lt;BookItem /&gt;      &lt;/BookList&gt;    &lt;/&gt;  )}export default BookShelves// BookList.jsxconst BookList = ({ children }) =&gt; {  console.log('[BookList] -rerender')  return &lt;div&gt;{children}&lt;/div&gt;}export default BookList// BookItem.jsxconst BookItem = () =&gt; {  console.log('[BookItem] -rerender')  const { savedCurrentBook } = useCurrentBook()  const { filteredBooks } = useSearch()  return (    &lt;&gt;      {filteredBooks.map((book) =&gt; (        &lt;div key={book.id}&gt;          &lt;Link to={`/details/${book.id}`}&gt;            &lt;span&gt;              {book.title} - {book.author}            &lt;/span&gt;          &lt;/Link&gt;          &lt;button            style={{ padding: '0.2rem 0.4rem', marginLeft: 4 }}            onClick={() =&gt; savedCurrentBook({ title: book.title })}          &gt;            읽기          &lt;/button&gt;        &lt;/div&gt;      ))}    &lt;/&gt;  )}export default memo(BookItem)이렇게 해주니 버튼 클릭시 해당 Item 컴포넌트만 리렌더링 되었습니다!다른 방법 (useCallback, memo)// BookList.jsxconst BookList = () =&gt; {  console.log('[BookList] -rerender')  const { filteredBooks } = useSearch()  const { savedCurrentBook } = useCurrentBook()  const handleSave = useCallback(savedCurrentBook, [])  return (    &lt;&gt;      {filteredBooks.map((book) =&gt; (        &lt;BookItem key={book.id} book={book} savedCurrentBook={handleSave} /&gt;      ))}    &lt;/&gt;  )}//BookItem.jsxconst BookItem = ({ book, savedCurrentBook }) =&gt; {  console.log('[BookItem] -rerender')  return (    &lt;div&gt;      &lt;Link to={`/details/${book.id}`}&gt;        &lt;span&gt;          {book.title} - {book.author}        &lt;/span&gt;      &lt;/Link&gt;      &lt;button        style={{ padding: '0.2rem 0.4rem', marginLeft: 4 }}        onClick={() =&gt; savedCurrentBook({ title: book.title })}      &gt;        읽기      &lt;/button&gt;    &lt;/div&gt;  )}export default memo(BookItem)이렇게 currentBook 값을 바꾸는 savedCurrentBook 함수와 BookItem 컴포넌트를 메모제이션 하는 것입니다.BookList는 리렌더링 되지만, BookItem은 리렌더링 되지 않습니다. (Props가 변경되지 않으므로)마무리기능 동작은 잘 하던 걸 최적화 시켜볼까? 리렌더링을 좀 방지해볼까? 메모는 언제 써야할까? 아, 이 기능도 써보고 싶은데! 라며 리팩토링을 시작했었습니다.고민을 너무 깊게 하다보니 오히려 더 꼬이는 기분이었습니다. 리렌더링 어려워 코드 리뷰 및 질문을 하려는데, 커밋도 기능단위로 나누지 않고 싹 바꿔놓곤 헤헤! 다했다! 하고 커밋해버려서… 보기에도 어렵고 질문하기에도 어려운 커밋이 되어버렸습니다…하지만 공부를 더 깊게 한 것 같아 재미는 있었습니다… 이렇게 배워가는 거겠죠…전체 코드는 해당 링크에서 보실 수 있습니다. 나만의 책장 만들기"
  },
  
  {
    "title": "[React] React Hooks: useContext로 전역 상태 관리하기",
    "url": "/posts/how-to-use-usecontext/",
    "categories": "React, hooks",
    "tags": "react, hooks, javascript",
    "date": "2025-01-14 17:31:00 +0900",
    





    
    "snippet": "useContext가 없었더라면…리액트로 개발할 때 모든 컴포넌트에 props로 어떤 값을 넘기고 싶을 때가 있습니다.즉, 부모에서 모든 자식 컴포넌트들로 props를 전달하고 싶다는 얘기죠.useContext를 배우지 않은 상황에서 간단하게 코드를 극단적으로 짜보겠습니다.코드function Title({ title }) {  return &lt;h3...",
    "content": "useContext가 없었더라면…리액트로 개발할 때 모든 컴포넌트에 props로 어떤 값을 넘기고 싶을 때가 있습니다.즉, 부모에서 모든 자식 컴포넌트들로 props를 전달하고 싶다는 얘기죠.useContext를 배우지 않은 상황에서 간단하게 코드를 극단적으로 짜보겠습니다.코드function Title({ title }) {  return &lt;h3&gt;{title}&lt;/h3&gt;}function Button({ title, onClick }) {  return &lt;button onClick={onClick}&gt;{title}&lt;/button&gt;}function Content({ content }) {  return &lt;p&gt;{content}&lt;/p&gt;}function SubContainer({ title, content, onClick }) {  return  &lt;&gt;    &lt;Title title={title} /&gt;    &lt;Content content={content} /&gt;    &lt;Button title={title} onClick={onClick} /&gt;  &lt;/&gt;}function Example() {  const [title, setTitle] = useState('useContext')  const [content, setContent] = useState('Context provides a way to pass data through the component tree without having to pass props down manually at every level')   function handleClick() {    setTitle('Changed!')  }    return (    &lt;&gt;      &lt;SubContainer        title={title}        content={content}        onClick={handleClick} /&gt;    &lt;/&gt;  )}최상단에 있는 부모 컴포넌트인 Example이 title, content, onClick이라는 상태(State)와 함수를 SubContainer 컴포넌트에 모두 전달해주고, SubContainer 컴포넌트가 또 다시 Title, Content, Button에 전달해주고 있습니다.문제점이러한 현상을 Props Drilling이라고 합니다. Props Drilling은 부모 컴포넌트에서 깊은 곳에 있는 자식 컴포넌트로 데이터를 전달하기 위해, 중간에 있는 여러 컴포넌트들을 거쳐가야 하는 현상을 말합니다.Props Drilling은 여러 문제점이 존재합니다.  코드 가독성 저하  유지보수의 어려움  불필요한 리렌더링 발생 가능성예제에서는 컴포넌트 수가 몇개 되지 않게 때문에 크게 번거롭지 않아보일 수도 있지만, 실제 수십, 수백개의 컴포넌트로 이뤄진 리액트 앱에서 일일이 추가해준다면 어떨까요? 살려주세요‘나는 Title만 변경하고 싶어!’하고 저 버튼을 클릭하는 순간, 부모부터 title 상태를 가진 SubContainer, Title, Button, Content 컴포넌트 모두 리렌더링 되는 상황이 펼쳐집니다.Context API위에서 살펴본 것처럼 우리에겐 전역 데이터를 관리하는데 좀 더 나은 접근 방식이 필요합니다.React Context는 전역 데이터를 좀 더 단순하지만 체계적인 방식으로 접근할 수 있도록 도와줍니다.Context API의 구성은 아래와 같습니다.            Context      전역 상태가 저장되는 곳                  Provider      전역 상태를 제공 → 어떤 범주에 제공할지를 지정                  Consumer      전역 상태를 사용 = 전역 상태에 대한 접근      Context 생성전역 데이터를 관리하기 위해서 React 패키지에서 제공하는 createContext 라는 함수를 사용합니다.Context가 뭔데? 라고 하신다면 전역 데이터를 담고 있는 하나의 저장 공간이라고 생각하면 됩니다. 이렇게요.이해가 가셨다면 Context를 생성해봅시다.import { createContext } from \"react\";const context = createContext()Provider로 Context 저장다음과 같이 어떤 컴포넌트에서 Provider로 감싸주면, 그 하위에 있는 모든 컴포넌트들은 Context에 저장되어 있는 전역 데이터에 접근할 수 있습니다.여기서 Context.Provider 범주 밖에서는 Default Value를 사용하고, 범주 안에서는 Initial Value를 사용합니다.  Default Value : const CountContext = createContext(defaultValue)  Initial Value : &lt;CountContext.Provider value={InitialValue}&gt;          Context 사용할 때 일반적으로는 최상단 부모에 (전체 영역에) 적용      Initial Value에서 value 속성값을 지정하지 않을 경우, Context를 생성할 때 넘겼던 디폴트 값이 사용됩니다.위에서의 코드를 Provider로 감싸보겠습니다.코드import { createContext } from \"react\";const Context = createContext()function Example() {  const [title, setTitle] = useState('useContext')  const [content, setContent] = useState('Context provides a way to pass data through the component tree without having to pass props down manually at every level')  function handleClick() {    setTitle('Changed!')  }    return (    &lt;&gt;      &lt;Context.Provider value={{ title, content, handleClick }}&gt;        &lt;SubContainer /&gt;      &lt;/Context.Provider&gt;    &lt;/&gt;  )}value로는 넘겨줄 값을 넣으면 됩니다.⚠️ 주의여기서 주의할 점은 Context로 관리할 상태를 최상단 부모 컴포넌트에 위치시키면 안 된다는 점입니다.최상위 부모 컴포넌트에 상태를 위치시키면 Context API를 사용하는 의미가 없어집니다. 최상단에 위치해있기 때문에 상태가 변하면 자식들의 리렌더링이 발생할 수 밖에 없기 때문이에요.그래서 보통은 Provider 컴포넌트를 하나 만들어서, 무조건 Provider 컴포넌트 안에 관리할 상태를 넣어 리렌더링 발생을 막습니다.import { createContext } from \"react\";const Context = createContext()function ContextProvider({ children }) {  const [title, setTitle] = useState('useContext')  const [content, setContent] = useState('Context provides a way to pass data through the component tree without having to pass props down manually at every level')  function handleClick() {    setTitle('Changed!')  }  return (    &lt;Context.Provider value={{ title, content, handleClick }}&gt;      {children}    &lt;/Context.Provider&gt;  )}function Example() {  return (    &lt;&gt;      &lt;ContextProvider&gt;        &lt;SubContainer /&gt;      &lt;/ContextProvider&gt;    &lt;/&gt;  )}Context 접근Provider로 저장한 전역 데이터를 하위 컴포넌트에서 접근 가능하게 했습니다. 이제 SubContainer 컴포넌트의 하위 컴포넌트에서도 Context를 사용할 수 있습니다.이제 Context에 접근할 건데, 크게 3가지 방법이 있습니다.Consumer로 Context 접근먼저 Provider와 대응하는 Consumer를 이용하여 접근할 수 있습니다.Consumer는 render props를 받기 때문에 Title 컴포넌트는 children으로 넘기는 함수의 인자로 값을 읽습니다.Title을 예로 들어보겠습니다.function Title() {  return (    &lt;Context.Consumer&gt;      {value =&gt; &lt;div&gt;{value.title}&lt;/div&gt;}    &lt;/Context.Consumer&gt;  )}useContext로 Context 접근일반적으로 함수형 컴포넌트에서는 useContext를 사용하는 것이 가장 깔끔하고 현대적인 방법입니다.function Title() {  return (    const { title } = useContext(Context)    &lt;div&gt;{title}&lt;/div&gt;  )}깔끔하죠?contextType으로 Context 접근contextType은 클래스형 컴포넌트에서만 사용이 가능합니다.아래 코드 형식처럼, this.context에서 필요한 value를 가져와서 사용합니다.static contextType = Contextrender() {  const value = this.context}마무리처음 만들었던 코드를 깔끔하고 현대적인 방식인 useContext를 사용하여 리팩토링 해보겠습니다.const Context = createContext()function Title() {  const { title } = useContext(Context)  return &lt;h3&gt;{title}&lt;/h3&gt;}function Button() {  const { title, handleClick} = useContext(Context)  return &lt;button onClick={handleClick}&gt;{title}&lt;/button&gt;}function Content() {  const { content } = useContext(Context)  return &lt;p&gt;{content}&lt;/p&gt;}function SubContainer() {  return  &lt;&gt;    &lt;Title /&gt;    &lt;Content /&gt;    &lt;Button /&gt;  &lt;/&gt;}function ContextProvider({ children }) {  const [title, setTitle] = useState('useContext')  const [content, setContent] = useState('Context provides a way to pass data through the component tree without having to pass props down manually at every level')  function handleClick() {    setTitle('Changed!')  }  return (    &lt;Context.Provider value={{ title, content, handleClick }}&gt;      {children}    &lt;/Context.Provider&gt;  )}function Example() {  return (    &lt;&gt;      &lt;ContextProvider&gt;        &lt;SubContainer /&gt;      &lt;/ContextProvider&gt;    &lt;/&gt;  )}코드가 훨씬 가독성이 좋아지고, 간단해진 것을 볼 수 있습니다.⚠️ 주의사항Context를 사용하게 되면 해당 컴포넌트는 해당 Context가 없이는 재사용이 어렵습니다.때문에 꼭 본연의 용도에 맞는 경우가 아니라면 사용을 피해야 합니다."
  },
  
  {
    "title": "[React] React Hooks: useState vs useRef 사용법과 예제",
    "url": "/posts/react-hooks-state-ref/",
    "categories": "React, hooks",
    "tags": "react, hooks, javascript",
    "date": "2025-01-14 13:00:00 +0900",
    





    
    "snippet": "UseStateuseState의 형태React에서 컴포넌트는 자신의 상태 또는 props가 바뀌면 리렌더링 됩니다.이 상태를 관리하기 위해서 React에서는 useState를 활용합니다.useState는 상태 유지 값과 그 값을 갱신하는 함수를 반환합니다.형태는 다음과 같습니다.const [state, setState] = useState(initia...",
    "content": "UseStateuseState의 형태React에서 컴포넌트는 자신의 상태 또는 props가 바뀌면 리렌더링 됩니다.이 상태를 관리하기 위해서 React에서는 useState를 활용합니다.useState는 상태 유지 값과 그 값을 갱신하는 함수를 반환합니다.형태는 다음과 같습니다.const [state, setState] = useState(initialState);                    state        상태 값 저장 변수입니다.                            setState = 비동기 동작        상태 값 갱신 함수입니다.            setState() 함수는 배열을 리턴하는데, 첫 번째 원소는 상태 값을 저장할 변수이고, 두번 째 원소는 해당 상태 값을 갱신할 때 사용할 수 있는 함수입니다. 그리고 setState() 함수에 인자로 해당 상태의 초기 값을 넘길 수 있습니다.간단하게 State 값 변경을 위한 Setter 함수(= Controller)라고 이해하면 됩니다.그림에 대한 설명을 하자면,  Model(State)은 View라는 컴포넌트가 리렌더 되냐 안되냐를 결정하는 기준이고, 방향은 단방향 바인딩입니다.  Controller는 Model을 직접적으로 변경하고 → 자연스럽게 Model의 변경이 View의 변경을 발생시킵니다.= 따라서 Controller는 View를 간접적으로 변경하게 되는셈입니다.📌 setState는 비동기setState를 사용하면서 주의할 점은, 동기가 아닌 비동기라는 점입니다.만약, 숫자를 증가시키면서 5가 되었을 때 count 아래에 5입니다.라는 문구를 출력한다고 해봅시다. console에는 클릭 전과 후의 count(state)의 결과를 출력합니다.function Example() {  const [count, setCount] = useState(0)  function click() {    console.log(`click 전 ${count}`)    setCount(count + 1)    console.log(`click 후 ${count}`)  }  return (    &lt;&gt;      &lt;div&gt;{count}&lt;/div&gt;      &lt;button onClick={click}&gt;증가&lt;/button&gt;    &lt;/&gt;  )}콘솔의 결과가 어떻게 될 거라고 예상하시나요?비동기라는 것을 알지 못했을 때는 click 전 0, click 후 1이라고 예상하실 겁니다.하지만 setState는 비동기라고 했습니다. click 한번을 눌렀을 때의 결과값은 다음과 같습니다.click 전 0click 후 0결과적으로 setState는 동작을 바로 수행하지 않고, 차곡차곡 모아두었다가 리렌더링 시 한번에 일괄적으로 상태변경을 적용합니다.useRefuseRef의 형태형태는 다음과 같습니다.const reference = useRef(initialValue);Ref의 특징function Example() {  const textReference = useRef(null)  function handleClick() {    console.log(textReference)    textReference.current.focus()  }  return (    &lt;div&gt;      &lt;input type=\"text\" ref={textReference} /&gt;\t  &lt;button onClick={handleClick}&gt;click me&lt;/button&gt;    &lt;/div&gt;  )}useRef는 .current 프로퍼티로 전달된 인자(initialValue)로 초기화된 변경 가능한 ref 객체를 반환합니다.handleClick 함수를 봅시다.textReference.current.focus()형태로, textReference의 현재 값인 &lt;input&gt;태그에 focus를 주고 있습니다.textReference는 &lt;input&gt; 태그에 연결되어 있으므로, 버튼을 클릭한다면 &lt;input&gt; 요소에 접근하여 focus가 수행됩니다.Ref는 render 메서드에서 생성된 DOM 노드나 React 엘리먼트에 접근하는 방법을 제공합니다.즉, ref는 DOM을 조작할 수 있게 합니다.하지만 ref를 다른 용도로 사용할 수도 있습니다. 아래와 예시를 보겠습니다.function Example() {  const reference = useRef('안녕')  console.log(reference.current)  function click() {    reference.current = '잘가'    console.log(reference.current)  }  return (    &lt;&gt;      &lt;h3 ref={reference}&gt;{reference.current}&lt;/h3&gt;      &lt;button onClick={click}&gt;클릭&lt;/button&gt;    &lt;/&gt;  )}export default Example안녕잘가  &lt;h3&gt;의 형식을 봅시다.&lt;h3&gt;에는 value={state} 형식이 아닌 ref={reference} 형식으로 ‘안녕’이라는 초기값을 가진 ref를 참조합니다.버튼을 클릭하여 reference의 값을 변경해봅시다.console에는 클릭할때마다 값이 ‘잘가’로 바뀌어 출력되는 것을 볼 수 있습니다.이런 식으로 reference의 값을 조회하고, 변경할 수도 있습니다.❓ 그럼 이 코드에서, 과연 &lt;h3&gt;의 {reference.current} 부분은 버튼을 클릭했을 때 ‘잘가’로 바뀔까요?아니요! 리렌더링이 일어나지 않아 바뀌지 않습니다. 왜 그럴까요?  Ref는 JavaScript Engine 내 Heap에 위치한 객체를 가르킵니다. 따라서 Ref 객체의 .current 속성을 변경시키는 것은 Heap 내의 값을 바꾸는 것으로, 주소 값 자체는 바뀌지 않습니다.결론은,      useRef는 순수 자바스크립트 객체를 생성합니다.    useRef로 만든 객체를 수정하는 것은 컴포넌트의 렌더링과 무관합니다. 다시 말하면, .current 프로퍼티를 변형하는 것이 리렌더링을 발생시키지 않습니다. ➡️ 결국 reference 값의 변동은 리렌더링이 일어나지 않기 때문에 State처럼 값 변경에 따라 바로바로 DOM을 바꿀 수 없다는 겁니다. (우리가 콘솔에 찍어준 것처럼 ‘나 바뀌었어! 어떻게?’ 하고 꺼내주는 별도의 작업이 필요하다는 겁니다!)  useState vs useRef그렇다면 언제 useState를 사용하고, 언제 useRef를 사용해야 하는 걸까요?이 해답은 공식문서에 나와있습니다.HTMLElement중에는 상태를 가지고 있는 것들이 있습니다.  input  select  textarea이 HTMLElement 들의 상태를 누가 관리하느냐에 따라 컴포넌트는 두 가지로 나뉩니다.  Controlled Component  Uncontrolled Component1. Controlled Component제어 컴포넌트입니다. React가 인지하고 있는 변수이기에 State 변경 시 리렌더링이 일어납니다.  여기서 React가 인지하고 있는 변수란 React가 상태로 추적하고 있는 변수를 의미합니다.즉, useState에 의해 상태로 관리하고 있는 컴포넌트를 제어 컴포넌트라고 합니다.2. Uncontrolled Component비제어 컴포넌트입니다. React가 인지하지 못한 변수이기에 Ref 내부 값을 변경 시 리렌더링이 일어나지 않습니다.즉, React가 상태로 추적하고 있지 않은 컴포넌트입니다. (ref를 React가 인지할 수 없기 때문)그래서 언제 뭘 사용하라고?useState  실시간 유효성 검사가 필요할 때  입력값에 따라 UI가 즉시 업데이트되어야 할 때  폼 데이터를 실시간으로 다른 컴포넌트와 공유해야 할 때이처럼 useState는 실시간성이 중요할 때 사용합니다.useRef  폼 제출 시에만 값을 확인하면 될 때  불필요한 리렌더링을 피하고 싶을 때 (너무 많은 입력폼(input 등)이 있어서, 각 폼 입력에 따른 유효성 검사 시 너무 많은 수의 리렌더링이 발생할 때)  특정 DOM 요소에 직접 접근이 필요할 때  UI와 직접적 관련이 없고, 복잡한 형태의 데이터라서 State를 사용하고싶지 않을 때이처럼 useRef는 많은 수의 리렌더링이 발생할 때, 실시간성이 중요하지 않은 데이터를 다룰 때 등 사용합니다.마치면서사실 제어 컴포넌트냐, 비제어 컴포넌트냐를 정할 때엔 많은 고민을 해봐야할 것 같습니다.state를 사용했을 때 input 태그에 아이디 하나를 칠 때도 그 밑의 비밀번호, 이메일 작성란 등 모든 컴포넌트가 리렌더링 될 테니 좋진 않겠죠.그렇다고 useRef를 써서 비제어 컴포넌트로 만들어버리면.. 실시간으로 입력한 값에 따른 실시간 유효성 검사 때 힘들지 않을까? 싶네요.  실시간 유효성 검사가 필요한 필드만 useState 사용  나머지 필드는 useRef 사용  필요한 경우 useMemo나 useCallback으로 리렌더링 최적화결국 요구사항과 상황에 따라 적절히 혼용하는 것이 좋은 것 같습니다."
  },
  
  {
    "title": "GitHub 블로그를 검색 엔진에 등록하기",
    "url": "/posts/github-blog-google-search-console/",
    "categories": "Guide, blog",
    "tags": "github, blog, guide",
    "date": "2025-01-14 09:00:00 +0900",
    





    
    "snippet": "검색 엔진 등록이란?내가 작성한 포스팅들을 구글이나 네이버 등과 같은 검색 엔진에 노출시키도록 해주는 방법입니다.저는 구글에만 등록할 것이기 때문에 Google search Console 등록 방법에 대해 설명드리겠습니다.Google Search Console바로가기시작하기 버튼을 누르면 다음 화면이 표시될 겁니다.도메인을 구입하신 분들은 왼쪽으로 진...",
    "content": "검색 엔진 등록이란?내가 작성한 포스팅들을 구글이나 네이버 등과 같은 검색 엔진에 노출시키도록 해주는 방법입니다.저는 구글에만 등록할 것이기 때문에 Google search Console 등록 방법에 대해 설명드리겠습니다.Google Search Console바로가기시작하기 버튼을 누르면 다음 화면이 표시될 겁니다.도메인을 구입하신 분들은 왼쪽으로 진행하시면 되는데, 저는 도메인을 구입하지 않았고 Github가 제공하는 url을 그대로 사용할 것이기 때문에 오른쪽으로 진행합니다.내 깃 블로그 주소를 적고 ‘계속’ 을 클릭합니다.순순히 권장 확인 방법을 사용할 겁니다. 1번의 html 파일을 다운 받아 줍니다.HTML 파일 추가다운 받은 html 파일은 우리의 github.io 파일 안의 _config.yml이 위치한 곳에 같이 넣어주면 됩니다.레포지토리에 올리기 전에 로컬 서버로 체크해봐도 되는데, 굳이 안 해도 큰 문제는 없다고 합니다.그대로 깃허브에 올려준 뒤 좀 기다려줍니다. (바로 누르면 소유권 확인 실패가 뜹니다…)지금인가? 싶을 때 확인 눌러줍니다.소유권이 확인되었다네요.sitemap.xml 추가HTML 파일만 세팅해준다면, 검색의 url 정보를 크롤링 할 수가 없습니다.따라서 이러한 작업을 할 수 있도록, sitemap.xml을 설정해줄 겁니다.아까 HTML 파일을 넣었던 위치에 똑같이 sitemap.xml 파일을 만들어줍니다. 그리고 아래의 코드를 복붙해주면 됩니다. 이건 sitemap.xml을 이용하여 google 크롤러가 url을 체크할 수 있게 해주는 코드가 됩니다.---layout: null---&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;urlset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"        xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\"        xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt;    {% for post in site.posts %}    &lt;url&gt;        &lt;loc&gt;{{ site.url }}{{ post.url }}&lt;/loc&gt;        {% if post.lastmod == null %}        &lt;lastmod&gt;{{ post.date | date_to_xmlschema }}&lt;/lastmod&gt;        {% else %}        &lt;lastmod&gt;{{ post.lastmod | date_to_xmlschema }}&lt;/lastmod&gt;        {% endif %}        {% if post.sitemap.changefreq == null %}        &lt;changefreq&gt;weekly&lt;/changefreq&gt;        {% else %}        &lt;changefreq&gt;{{ post.sitemap.changefreq }}&lt;/changefreq&gt;        {% endif %}        {% if post.sitemap.priority == null %}        &lt;priority&gt;0.5&lt;/priority&gt;        {% else %}        &lt;priority&gt;{{ post.sitemap.priority }}&lt;/priority&gt;        {% endif %}    &lt;/url&gt;    {% endfor %}&lt;/urlset&gt;robots.txt 추가User-agent: *Allow: /Sitemap: https://oding01.github.io/sitemap.xml  // 본인 사이트 적어줘야 합니다.똑같이 _config.yml 파일이 있는 곳에 robots.txt 파일을 만들고 위 코드를 작성해줍니다.이제 크롤러가 접근해서 robots.txt를 확인하고, 접근하고 싶은 sitemap을 확인하는 방식입니다.Allow에 본인이 원하시는 정보만 입력하거나 제한을 두고싶으신 내용을 입력하면 크롤러가 확인해서 진행해줍니다.다 하셨으면 저장소에 푸쉬해줍시다!Sitemap 제출이제 마지막입니다!Google Search Console로 다시 이동하셔서,이렇게 내 사이트 속성을 찾아서 클릭합니다. Sitemaps 탭을 찾고, 새 사이트맵 추가에 아래와 같이 sitemap.xml을 입력해줍니다.이제 무한한 기다림의 시간이랍니다. 사람마다 걸리는 시간이 다 달라서… 인내심을 가지고 기다려봅시다."
  },
  
  {
    "title": "GitHub 블로그를 생성해보자! - Chirpy 테마",
    "url": "/posts/gitblog-create/",
    "categories": "Guide, blog",
    "tags": "github, blog, guide",
    "date": "2025-01-11 09:00:00 +0900",
    





    
    "snippet": "      이 글은 Github 아이디가 존재하고, USERNAME.github.io 레포지토리가 생성되어 있다는 가정하에 진행합니다.    저는 Window에서 VSCode에 WSL을 연결하여 Ubuntu Linux 환경에서 진행합니다.  Velog도, Tistory도 있는데 왜 깃허브로?  무료 호스팅          별도의 서버 비용이 들지 않음...",
    "content": "      이 글은 Github 아이디가 존재하고, USERNAME.github.io 레포지토리가 생성되어 있다는 가정하에 진행합니다.    저는 Window에서 VSCode에 WSL을 연결하여 Ubuntu Linux 환경에서 진행합니다.  Velog도, Tistory도 있는데 왜 깃허브로?  무료 호스팅          별도의 서버 비용이 들지 않음      도메인도 github.io 무료로 제공        버전 관리 용이          Git을 통한 모든 변경사항 추적 가능      실수로 게시물을 삭제해도 복구 가능        높은 자유도          Jekyll 테마를 통한 디자인 커스터마이징      HTML, CSS, JavaScript로 원하는 기능 추가 가능        개발자 친화적          코드 공유가 쉬움      기술 블로그로 적합      포트폴리오로도 활용 가능        SEO 최적화          정적 사이트로 검색엔진 최적화에 유리      빠른 로딩 속도      1. 시작하기1.1. 레포지토리 Clone일단 본인의 로컬 폴더에 만들어둔 USERNAME.github.io 레포지토리를 Clone합니다.git clone https://github.com/USERNAME/USERNAME.github.io.git클론을 실행한 경로로 가서 clone이 잘 되었는지 확인합니다.잘 되었네요.1.2. 테마 다운로드이제 테마를 다운받을 시간입니다.  레포지토리 다운로드 테마 다운로드 페이지접속해서 마음에 드는 테마를 고릅니다. 해당 테마의 레포지토리로 이동한 후, 여기선 선택지가 2개가 있습니다.  레포지토리 fork  레포지토리 Download Zip  만약 1번. fork 했다면, 아마 master 브랜치라고 되어 있을텐데 바꿔줍니다. 저장소 이름도 USERNAME.github.io로 바꿔줘야 합니다. 1번은 간단하지만, 이게 블로그 글 작성 후 commit을 하게 되면 잔디가 심어지지 않는다하더라구요… 이미 gihub.io 레포지토리가 있기도 하고 그래서 전 2번으로 갔습니다.레포지토리를 다운 받고 압축을 풀어준 뒤, 안에 있는 파일을 모두 내 github.io 폴더에 복붙해줍니다.파일이 더럽게 많습니다. 2. Ruby 설치하기jekyll을 사용하려면 Ruby를 설치해야 합니다.  MAC의 경우에는 기본적으로 2.x버전의 ruby가 설치되어 있다고 하는데, jekyll을 사용하려면 3버전 이상의 ruby를 설치해야 합니다.윈도우는 루비 다운로드 에 가서 다운로드 해주세요.여기서 아래의 명령어로 ruby의 버전 리스트를 확인합니다. (윈도우는 rbenv가 아닌 ruby 명령어로 ruby prompt를 실행시켜 3. Jekyll 설치하기로 바로 넘어가주세요.)rbenv install -l3버전 이상을 설치해야 하는데, 저는 3.2.6을 설치해주었습니다.rbenv install 3.2.6rbenv global 3.2.6rbenv rehash3. Jekyll 설치하기ruby가 정상적으로 설치되었다면, 이제 gem 명령어를 사용할 수 있습니다. gem으로 jekyll을 설치해줍시다.gem install jekyll설치되었다면 아래 명령어로 bundle을 설치해줍니다.gem install bundlerbundle install  webirck 관련 에러가 난다면gem install webrick  node.js 모듈을 설치하지 않으면 assets/js/dist/*.min.js Not Found 에러 발생과 함께 블로그 기능이 정상적으로 동작하지 않습니다.(css가 적용되지 않는다는 등)따라서 npm을 통해 node.js 모듈을 설치해줍니다.npm installnpm run build이제 거의 다 왔습니다! 로컬에서 내 블로그를 한 번 봅시다.bundle exec jekyll serve혹은jekyll serve홈페이지는 브라우저 창에 http://127.0.0.1:4000/을 입력하거나, 터미널 창의 Server address : http://127.0.0.1:4000/ 주소를 ctrl + 클릭 하면 접속할 수 있습니다.  만약 실행 시에, Deprecation: You appear to have pagination turned on, but you haven't included the `오류 발생 플러그인` gem. Ensure you have `plugins: [오류 발생 플러그인]` in your configuration file.등의 오류가 난다면      Gemfile에 오류가 발생한 플러그인을 추가합니다.      gem '오류 발생 플러그인'              _config.yml에 추가한 플러그인을 작성해줍니다.      plugins:  - 오류 발생 플러그인              bundle install 로 번들을 다시 설치한 후 서버를 실행해주세요.  오류 없이 잘 실행됐다면 볼 수 있는 화면번외. 초기화테마의 글 등 초기화를 진행하고 싶으신분bash tools/init.sh4. _config.yml 파일 수정해주기지금이야 로컬에서 http://127.0.0.1:4000/ 로 돌아가고 있다고는 하지만, Github에서는 다른 사람들처럼 USERNAME.github.io 로 연결돼야 하지 않겠습니까? _config.yml 파일을 찾아서 들어가줍니다.저는 주석도 지우고 많은 걸 변경해줬지만, 이와 비슷한 코드를 볼 수 있을 겁니다.theme: jekyll-theme-chirpy  baseurl: ''   # 사용자 페이지를 만들었을 경우, 빈칸으로 둡니다. 프로젝트 페이지를 만든 경우 프로젝트 명을 적어줍니다.lang: en    # 사용하는 언어 설정을 진행합니다. http://www.lingoes.net/en/translator/langcode.htm 로 접속하여 확인가능합니다.timezone: Asia/Seoul    # timezone 설정정title: 코딩하는 감자    # 블로그 이름입니다. 상단 브라우저 창에도 반영됩니다.tagline: 우당탕탕 개발일지    # title 밑에 표시되는 tagline입니다.description: &gt;-   # seo를 위한 것들입니다. (내 블로그를 어떤 검색어로 들어올지)  github, vscode, javascript, react,  깃허브 블로그, Github 블로그url: \"https://oding01.github.io\"    # 내 Git 레포지토리 주소입니다. 꼭 적읍시다.github:  username: oding01   # 본인 github username# twitter:#   username: \"\"    # 저는 트위터가 없어서 주석처리했습니다.social:  name: 이어진  email: slimin92@naver.com  links:    - https://github.com/oding01    # 다른 social이 없어서 github만 적어주었습니다.theme_mode: # [light | dark] 비워두면 다른 사용자의 default 설정에 따라 바뀝니다.# cdn: \"https://chirpy-img.netlify.app\"   avatar가 바뀌지 않아 주석처리 해줬더니 해결했습니다.avatar: \"/assets/img/profile.png\"    # title 위에 대표이미지입니다.toc: true   # 포스팅 글 옆의 목차를 자동으로 생성해주는 애입니다.            # 모든 포스팅에서 목차 생성을 하지 않겠다하면 false로 바꾸면 됩니다.paginate: 10...5. GitHub에 배포하기5.4. 배포 전 (트러블 슈팅)🔒 문제로컬에서 잘 작동하니까 이제 레포지토리에 배포만 하면 되겠지?다 끝난 줄 알고 냅다 푸쉬했습니다.commit 내역Action 탭 내역날 반겨주는 무수한 오류들… 반갑다 ㅋ… 여기선 4시간 썼습니다. 진짜 개어렵네수시간의 구글링이 시작됐습니다.  _config.yml에서 theme 주석처리 어떤 블로그에서,          ” 원래는 theme을 주석처리 하지 않고 사용하고 있었는데 이제는 주석처리하고 theme 이던 remote_theme 이던 둘다 사용하지 않아야 한다고 한다. 이유는.. 무슨 서버를 이제 사용하지 않는다고? 하는거 같은데..” 라고 해서 바로 주석처리했더니 여전히 오류가 났습니다. (2021년 글이었음)        제가 파일들 전체 복붙을 안 했더군요. 없는 파일들이 있었습니다. ➡️ 추가해주어서 build 및 deploy 오류는 해결됐지만 이 친구가 절 반겨줬습니다.홈페이지 접속🗝️ 해결got you~ 또 수시간의 구글링으로 답을 찾았습니다.  Linux 외 환경은 모두 아래 명령어 실행 후 진행해주세요.  bundle lock --add-platform x86_64-linux        배포 전 아래와 같이 Settings - Pages - Build and deployment 에서 소스를 GitHub Actions로 변경합니다.         Configure를 선택합니다.         Commit changes…를 선택 후, Commit changes를 클릭합니다.    본인이 설치한 버전과 맞는지 확인해주세요! 저는 가상 환경이고 ruby도 3.2.6을 깔아서 변경 후 진행했습니다.  jobs:  # Build job  build:    runs-on: ubuntu-22.04   # 변경 부분    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Setup Ruby        uses: ruby/setup-ruby@8575951200e472d5f2d95c625da0c7bec8217c42 # v1.161.0        with:          ruby-version: \"3.2\"   # 변경 부분          bundler-cache: true          cache-version: 0      - name: Setup Pages  ...  ...  # Deployment job  deploy:    environment:      name: github-pages      url: $    runs-on: ubuntu-22.04   # 변경 부분    needs: build    Github에서 jekyll.yml을 생성했으니 로컬과 동기화를 해줍니다.    git pull        그 외  구글링하며 하라고 권장했던 동작들입니다. 전 문제 없이 동작해서 해주지 않았지만, 오류가 난다면 시도해보세요.  .gihub &gt; workflow 디렉토리 내에서 기존 배포 방식(Deploy form a branch)에 사용되던 파일을 삭제합니다.  .gitignore 내 assets/js/dist 디렉토리 내 파일들의 Push가 무시되도록하는 설정을 주석처리 합니다.5.5. 해치웠나?이제 레포지토리에 배포해봅시다 !git add . git commit -m \"first commit\"git push origin main  저는 브랜치 이름을 main이라고 rename 해주었습니다. master로 되어있다면, git branch -m main으로 리네임해서 사용합시다.🎉🎉 Action 탭에서 워크 플로우가 정상적으로 동작하고, 블로그 기능이 정상적으로 실행되는 것을 볼 수 있습니다!!수고하셨습니다 ! 이제 본인만의 깃허브 블로그를 생성했습니다. 벨로그 글 옮길 생각하면 어지럽네요… 그래도 열심히 해야죠…Github 블로그는 잘 노출되게 해주려면 검색엔진 등록 작업을 해야합니다.다음 글은 블로그를 검색엔진에 등록하는 방법을 올려보겠습니다. ➕ 추가 VSCode Extension에서 Dev Containers를 깔고컨테이너에서 다시 열기를 클릭하면 Docker 환경에서 작성할 수 있는 것 같습니다. 의존성 등 여러 환경이 자동으로 설치되어 동작합니다. Chirpy 개발자도 권장하는 사항이긴 했는데 시도해보세요.chirpy README.md window chirpy 테마 적용 Mac OS chirpy 테마 적용"
  },
  
  {
    "title": "[VSCode] ESLint&Prettier 설정 시 Delete `␍` eslint(prettier/prettier) 에러 해결",
    "url": "/posts/eslint-prettier-error/",
    "categories": "VSCode, TroubleShooting",
    "tags": "vscode, troubleshooting",
    "date": "2025-01-11 08:50:00 +0900",
    





    
    "snippet": "⚠️ 문제import React from 'react';function LoginPage() {\treturn (\t\t&lt;div&gt;\t\t\t&lt;div&gt;LoginPage&lt;/div&gt;\t\t&lt;/div&gt;\t);}export default LoginPage;eslint와 prettier 설정 후 간단한 테스트 컴포넌트를 만들어보는데 이...",
    "content": "⚠️ 문제import React from 'react';function LoginPage() {\treturn (\t\t&lt;div&gt;\t\t\t&lt;div&gt;LoginPage&lt;/div&gt;\t\t&lt;/div&gt;\t);}export default LoginPage;eslint와 prettier 설정 후 간단한 테스트 컴포넌트를 만들어보는데 이런 오류가 떴다.  Delete ‘␍’ eslint(prettier/prettier)엥 이게 뭐지? 기본 index 페이지에서는 뜨지 않는 오류였다.🎈생각  eslint(prettier/prettier) 에서 오류가 났으니 .eslintrc.js(json을 js로 바꿨다) 설정에서 뭔가 잘못된 게 아닐까? -&gt; 코드를 뚫어져라 쳐다보다 login.jsx 파일의 코드는 tabWidth가 굉장히 띄워져있는 걸 찾았다. eslintrc 파일에는 2로 해놨는데..  Ctrl+.으로 에러발생시 없는 모듈 자동으로 찾아주기 시도 -&gt; 실패  개발자의 기본 소양… 구글링. 설정법이 잘못된 것 같으니 에러 메세지를 찾아보자.✨해결위 오류는 windows에서 발생하는 오류로, prettier의 기본 라인 개행 방식(lf)이 windows의 개행 방식(crlf)과 다르기 때문에 발생한다. 나는 별도의 .eslintrc 파일이 있었기 때문에 eslint 설정에서 prettier의 개행 방식을 auto로 변경해주는 방식을 시도했다.module.exports = {\t...\tplugins: ['prettier'],\trules: {\t\t...\t\t'prettier/prettier': [\t\t\t'error',\t\t\t// 아래 규칙들은 개인 선호에 따라 prettier 문법 적용\t\t\t// https://prettier.io/docs/en/options.html\t\t\t{\t\t\t\tsingleQuote: true,\t\t\t\tsemi: true,\t\t\t\tuseTabs: true,\t\t\t\ttabWidth: 2,\t\t\t\ttrailingComma: 'all',\t\t\t\tprintWidth: 80,\t\t\t\tbracketSpacing: true,\t\t\t\tarrowParens: 'avoid',\t\t\t\tendOfLine: 'auto', // 요 라인 추가\t\t\t},\t\t],\t},};endOfLine: 'auto'를 추가하자마자 빨간 줄이 사라졌다! 역시 구글링의 힘은 대단하다.참고(감사합니다!)"
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 15:10:00 +0900",
    





    
    "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...",
    "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateTo accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Post DescriptionBy default, the first words of the post are used to display on the home page for a list of posts, in the Further Reading section, and in the XML of the RSS feed. If you don’t want to display the auto-generated description for the post, you can customize it using the description field in the Front Matter as follows:---description: Short summary of the post.---Additionally, the description text will also be displayed under the post title on the post’s page.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global setting for comments is defined by the comments.provider option in the _config.yml file. Once a comment system is selected for this variable, comments will be enabled for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MediaWe refer to images, audio and video as media resources in Chirpy.URL PrefixFrom time to time we have to define duplicate URL prefixes for multiple resources in a post, which is a boring task that you can avoid by setting two parameters.      If you are using a CDN to host media files, you can specify the cdn in _config.yml. The URLs of media resources for site avatar and posts are then prefixed with the CDN domain name.    cdn: https://cdn.com            To specify the resource path prefix for the current post/page range, set media_subpath in the front matter of the post:    ---media_subpath: /path/to/media/---      The option site.cdn and page.media_subpath can be used individually or in combination to flexibly compose the final resource URL: [site.cdn/][page.media_subpath/]file.extImagesCaptionAdd italics to the next line of an image, then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeTo prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the media_subpath can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post \"Text and Typography\".For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }VideoSocial Media PlatformYou can embed videos from social media platforms with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms.            Video URL      Platform      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211              https://www.bilibili.com/video/BV1Q44y1B7Wf      bilibili      BV1Q44y1B7Wf      Video FilesIf you want to embed a video file directly, use the following syntax:{% include embed/video.html src='{URL}' %}Where URL is a URL to a video file e.g. /path/to/sample/video.mp4.You can also specify additional attributes for the embedded video file. Here is a full list of attributes allowed.  poster='/path/to/poster.png' — poster image for a video that is shown while video is downloading  title='Text' — title for a video that appears below the video and looks same as for images  autoplay=true — video automatically begins to play back as soon as it can  loop=true — automatically seek back to the start upon reaching the end of the video  muted=true — audio will be initially silenced  types — specify the extensions of additional video formats separated by |. Ensure these files exist in the same directory as your primary video file.Consider an example using all of the above:{%  include embed/video.html  src='/path/to/video.mp4'  types='ogg|mov'  poster='poster.png'  title='Demo video'  autoplay=true  loop=true  muted=true%}AudiosIf you want to embed an audio file directly, use the following syntax:{% include embed/audio.html src='{URL}' %}Where URL is a URL to an audio file e.g. /path/to/audio.mp3.You can also specify additional attributes for the embedded audio file. Here is a full list of attributes allowed.  title='Text' — title for an audio that appears below the audio and looks same as for images  types — specify the extensions of additional audio formats separated by |. Ensure these files exist in the same directory as your primary audio file.Consider an example using all of the above:{%  include embed/audio.html  src='/path/to/audio.mp3'  types='ogg|wav|aac'  title='Demo audio'%}Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Highlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.MathematicsWe use MathJax to generate mathematics. For website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---After enabling the mathematical feature, you can add math equations with the following syntax:  Block math should be added with $$ math $$ with mandatory blank lines before and after $$          Inserting equation numbering should be added with $$\\begin{equation} math \\end{equation}$$      Referencing equation numbering should be done with \\label{eq:label_name} in the equation block and \\eqref{eq:label_name} inline with text (see example below)        Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$  Inline math (in lists) should be added with \\$$ math $$&lt;!-- Block math, keep all blank lines --&gt;$$LaTeX_math_expression$$&lt;!-- Equation numbering, keep all blank lines  --&gt;$$\\begin{equation}  LaTeX_math_expression  \\label{eq:label_name}\\end{equation}$$Can be referenced as \\eqref{eq:label_name}.&lt;!-- Inline math in lines, NO blank lines --&gt;\"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\"&lt;!-- Inline math in lists, escape the first `$` --&gt;1. \\$$ LaTeX_math_expression $$2. \\$$ LaTeX_math_expression $$3. \\$$ LaTeX_math_expression $$  Starting with v7.0.0, configuration options for MathJax have been moved to file assets/js/data/mathjax.js, and you can change the options as needed, such as adding extensions.If you are building the site via chirpy-starter, copy that file from the gem installation directory (check with command bundle info --path jekyll-theme-chirpy) to the same directory in your repository.MermaidMermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 12:33:00 +0900",
    





    
    "snippet": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risu...",
    "content": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\";MathematicsThe mathematics powered by MathJax:\\[\\begin{equation}  \\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}  \\label{eq:series}\\end{equation}\\]We can reference the equation as \\eqref{eq:series}.When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;&#xfe0e;              The 2nd footnote source &#8617;&#xfe0e;      "
  }
  
]

